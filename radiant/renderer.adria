/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var mat4 = require('./glmatrix').mat4;
var MixedBuffer = require('./buffer/mixed');

module Renderer = proto {

    public radiant: null,

    /**
     * @var integer current number of rectangles
     */
    public size: 0,

    /**
     * reset size after draw
     */
    protected drawResets: true,

    /**
     * @var MixedBuffer vertices, 4 per rectangle
     */
    public vertices: null,

    /**
     * the shader type used for the rendering
     */
    protected Shader: null,

    /**
     * current rendersettings
     */
    protected shader: null,
    protected blendMode: null,
    protected texture: null,
    protected textureUnit: 0,

    /**
     * increased for each webgl draw call
     */
    public debugDrawCount: 0,

    public screenOffsetX: 0,
    public screenOffsetY: 0,

    /**
     * creates a new renderer
     *
     * @param Radiant radiant
     */
    public constructor: func(object radiant) {

        this.radiant = radiant;
        this.shader = new this.Shader(radiant);

        // set up vertex-indices for each rectangle

        this.vertices = new MixedBuffer(radiant, radiant.index.size * this.shader.attributeSize /* / 4 * 4  */);

        this.restoreContext();
        this.setupUniforms();

        this.radiant.on('contextrestored', this, this.restoreContext);
        this.radiant.on('resize', this, this.setupUniforms);
    },

    /**
     * clean up buffers and listener
     */
    public destroy: func() {

        this.radiant.off('contextrestored', this, this.restoreContext);
        this.radiant.off('resize', this, this.setupUniforms);
        this.shader.destroy();
        this.vertices.destroy();
    },

    /**
     * sets the renderer's screen offset. this offset is passed via uniform to the shader,
     * so it affects the rendering even when a vertex buffers have not been updated (i.e. in the case of particles)
     *
     * @param integer x
     * @param integer y
     */
    public setScreenOffset: func(finite x = 0, finite y = 0) {
        this.screenOffsetX = x;
        this.screenOffsetY = y;
    },

    /**
     * restore webgl context after context loss
     */
    public restoreContext: func() { },

    /**
     * draw previous added rectangles and reset list
     */
    public draw: func() {

        if (this.size === 0) {
            return false;
        }

        // update vertex data in gl buffers, set screen offset

        this.vertices.upload(0, this.size * this.shader.attributeSize /* / 4 (floats) * 4 (corners) */);
        this.shader.uScreenOffset.value[0] = this.screenOffsetX;
        this.shader.uScreenOffset.value[1] = this.screenOffsetY;
        this.useResources();

        // draw 2 triangles = 6 indices / 4 unique vertices per rectangle

        this.radiant.gl.drawElements(this.radiant.gl.TRIANGLES, this.size * 6, this.radiant.gl.UNSIGNED_SHORT, 0);

        if (this.drawResets) {
            this.size = 0;
        }

        this.debugDrawCount++;
        return true;
    },

    /**
     * select shader, blendmode and texture
     */
    protected useResources: func() {

        this.texture.use(this.textureUnit);
        this.shader.use();
        this.blendMode.use();
    },

    /**
     * set up drawing state for given texture and current blendmode
     *
     * @param BlendMode blendMode
     * @param Texture texure
     */
    protected setupState: func(object blendMode, object texture) {

        if (this.blendMode !== blendMode || this.texture !== texture || (this.size >= this.radiant.index.size)) {
            this.draw();
            this.blendMode = blendMode;
            this.texture = texture;
        }
    },

    /**
     * set up base matrix
     */
    protected setupUniforms: func() {

        var matrix = mat4.create();
        mat4.identity(matrix);
        mat4.translate(matrix, matrix, [ -1.0, 1.0, 0.0 ]);
        mat4.scale(matrix, matrix, [ 2.0 / this.radiant.width, -2.0 / this.radiant.height, 1.0 ]);

        this.shader.uMatrix.value = matrix;
        this.shader.uTexture.value = this.textureUnit;
        this.shader.uScreenOffset.value = new Float32Array(2);
    },
};
