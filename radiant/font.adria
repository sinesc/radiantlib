/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis Möhlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Listenable = require('astd/listenable');
var TextureImage = require('./texture/image');

/**
 * font
 *
 * @event load()
 */
module Font = proto (Listenable) {

    protected characterSet: '^1234567890ß´°!"§$%&/()=?`qwertzuiopü+QWERTZUIOPÜ*asdfghjklöä#ASDFGHJKLÖÄ\'<yxcvbnm,.->YXCVBNM;:_ ²{[]}\\@€~|µ',

    protected radiant     : null,
    protected characters  : null,
    protected name        : '',
    protected texture     : null,

    public constructor: func(object radiant, string? name = null) {

        this.radiant = radiant;

        if (name !== null) {
            this.load(name);
        }
    },

    public ready: prop {
        get: func() {
            return this.characters !== null;
        }
    },

    public load: func(string name) {

        var ctx = document.createElement('canvas').getContext('2d');
        this.characters = null;
        this.name = '';
        this.loadFont(name, ctx, this.scanFont);
    },

    protected loadFont: func(string name, object ctx, func callback) {

        var sizeMatch = /([0-9]+(px|pt|em))/;
        var testString = '^,Wmuli178 _*~#';

        if (sizeMatch.test(name) !== true) {
            throw new Exception('font size must be specified');
        }

        var that = this;
        var fontSize = name.match(sizeMatch)[1];

        ctx.font = fontSize + ' sans-serif';
        var initialMeasure = ctx.measureText(testString);
        ctx.font = name;

        var interval = setInterval(func() {
            var measure = ctx.measureText(testString);

            if (measure.width !== initialMeasure.width) {
                clearInterval(interval);
                callback.call(that, name, ctx);
            }
        }, 10);
    },

    protected scanFont: func(string name, object ctx) {

        var charSet = this.characterSet;
        var chars = Object.create(null);

        // measure letters, determine required canvas size

        var canvasWidth = 0;
        var canvasHeight = 0;
        var fakeHeight = ctx.measureText('m').width * 2; // terrible api doesn't provide height

        for (var i = 0; i < charSet.length; i++) {
            var letter = charSet.substr(i, 1);
            var measure = ctx.measureText(letter);
            chars[letter] = new Character(canvasWidth, 0, measure.width, fakeHeight /*measure.height*/);
            canvasWidth += measure.width + 4;
            canvasHeight = Math.max(canvasHeight, fakeHeight /*measure.height*/);
        }

        // size canvas, create characters

        var canvas = ctx.canvas;
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;

        ctx.fillStyle = '#ffffff';
        ctx.textBaseline = 'top';
        ctx.font = name;

        for (var letter, character in chars) {
            ctx.fillText(letter, character.x, character.y);
        }

        // create texture from canvas

        var uv = null;

        if (this.texture !== null) {
            this.texture.destroy();
        }

        this.texture = new TextureImage(this.radiant, canvas);

        for (var letter, character in chars) {
            uv = this.texture.getUV(character.x, character.y);
            character.u0 = uv[0];
            character.v0 = uv[1];
            uv = this.texture.getUV(character.x + character.width, character.y + character.height);
            character.u1 = uv[0];
            character.v1 = uv[1];
        }

        // done

        this.characters = chars;
        this.name = name;
        this.trigger('load');
    },
};

export Character = proto {
    x       : 0,
    y       : 0,
    width   : 0,
    height  : 0,
    u0      : 0.0,
    v0      : 0.0,
    u1      : 0.0,
    v1      : 0.0,
    constructor: func(finite x, finite y, finite width, finite height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
};
