/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
module ShaderManager = proto {

    radiant: null,

    activeShader: null,
    shaderStack: null,

    constructor: func(object radiant) {
        this.radiant = radiant;
        this.shaderStack = [];
    },

    use: func(object? shader = null) {

        if (shader === null) {
            return; //!todo use some sort of default here? disable the program?
        }

        this.activeShader = shader;
        shader.use();
    },

    /**
     * use given shader, push previous onto stack
     *
     * @param Shader shader
     * @return Shader the previously used shader
     */
    push: func(object shader) {
        var oldShader = this.activeShader;
        this.shaderStack.push(oldShader);
        this.use(shader);
        return oldShader;
    },

    /**
     * pop previous shader from stack and use it
     *
     * @param Shader shader
     * @return Shader the previously used shader
     */
    pop: func() {
        var oldShader = this.activeShader;
        this.use(this.shaderStack.pop());
        return oldShader;
    },
};