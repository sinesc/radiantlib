/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
module ShaderManager = proto {

    radiant: null,

    activeShader: null,
    shaderStack: null,

    constructor: func(object radiant) {
        this.radiant = radiant;
        this.shaderStack = [];
    },

    use: func(object? shader = null) {

        if (shader === null) {
            return; //!todo use some sort of default here? disable the program?
        }

        this.activeShader = shader;
        shader.use();
    },

    /**
     * use given shader, push previous onto stack
     *
     * @param Shader shader
     * @return Shader the previously used shader
     */
    push: func(object shader) {
        var oldShader = this.activeShader;
        this.shaderStack.push(oldShader);
        this.use(shader);
        return oldShader;
    },

    /**
     * pop previous shader from stack and use it
     *
     * @param Shader shader
     * @return Shader the previously used shader
     */
    pop: func() {
        var oldShader = this.activeShader;
        this.use(this.shaderStack.pop());
        return oldShader;
    },
};