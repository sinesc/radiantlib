/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Listenable = require('astd/listenable');
var TextureFile = require('./texture/file');
var Frame = require('./sprite/frame');
var Parameter = require('./sprite/parameter');

/**
 * individual sprite
 *
 * @event load()
 */
module Sprite = proto (Listenable) {

    radiant: null,

    /**
     * image object
     */
    texture: null,

    /**
     * array of frame coordinates for the loaded sprite
     */
    frames: null,

    /**
     * set to true once the sprite is ready !TODO getter
     */
    ready: false,

    /**
     * @var integer width of the sprite !TODO getter
     */
    width: 0,

    /**
     * @var integer height of the sprite !TODO getter
     */
    height: 0,

    /**
     * @var integer x anchor position
     */
    anchorX: 0.0,

    /**
     * @var integer y anchor position
     */
    anchorY: 0.0,

    /**
     * @var integer numFrames number of frames in sprite
     */
    numFrames: 0,

    /**
     * construct sprite from filename or parameter object
     *
     * @param string/Parameter params
     */
    public constructor: func(object radiant, params) {

        this.radiant = radiant;
        this.frames = [];

        if (typeof params === 'string') {
            params = new Parameter(params);
        }

        // set properties from params

        this.width = params.width;
        this.height = params.height;
        this.anchorU = params.anchorU;
        this.anchorV = params.anchorV;
        this.numFrames = params.count;

        // load image

        this.texture = new TextureFile(this.radiant, params.file);
        this.texture.once('load', [ params ], this, this.generate);
    },

    /**
     * @var finite anchor u position (0..1 is inside the sprite)
     */
    public anchorU: prop {
        get: func() {
            return this.anchorX / this.width;
        },
        set: func(value) {
            this.anchorX = value * this.width;
        }
    },

    /**
     * @var finite anchor v position (0..1 is inside the sprite)
     */
    public anchorV: prop {
        get: func() {
            return this.anchorY / this.height;
        },
        set: func(value) {
            this.anchorY = value * this.height;
        }
    },

    /**
     * called by constructor once the sprite's texture is loaded, computes sprite frames
     *
     * @param Parameter params
     */
    protected generate: func(Parameter params) {

        // try layout auto-detection

        var layout = params.layout;

        if (layout === Parameter::LAYOUT_AUTO) {
            layout = (params.width * params.count === this.texture.width ? Parameter::LAYOUT_HORIZONTAL : Parameter::LAYOUT_VERTICAL);
        } else {
            layout = params.layout;
        }

        // compute frames

        for (var id = params.start, end = params.start + params.count; id < end; id++) {
            this.frames.push(this.getFrame(layout, this.texture, params.width, params.height, id));
        }

        this.ready = true;
        this.execute('load');
    },

    /**
     * calculates the coordinates for a specific frame using given layout
     *
     * @param string layout horizontal (ids count left to right, top to bottom) or vertical (ids count top to bottom, left to right)
     * @param object texture
     * @param finite spriteWidth width for individual sprite frames
     * @param finite spriteHeight height for individual sprite frames
     * @param finite id frame id
     */
    protected getFrame: func(string layout, object texture, finite spriteWidth, finite spriteHeight, finite id) {

        // calculate x and y for given frame using defined layout order

        var spl, x, y;

        if (layout === Parameter::LAYOUT_HORIZONTAL) {
            spl = texture.width / spriteWidth;
            x = Math.floor(id % spl) * spriteWidth;
            y = Math.floor(id / spl) * spriteHeight;
        } else {
            spl = texture.height / spriteHeight;
            x = Math.floor(id / spl) * spriteWidth;
            y = Math.floor(id % spl) * spriteHeight;
        }

        return new Frame(texture, x, y, spriteWidth, spriteHeight);
    },
};
