/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * find byte positions and masks for individual color channels
 */
var rPos = 0, gPos = 8, bPos = 16, aPos = 24;

(func() {
    var buffer = new ArrayBuffer(2);

    // store 256 in little endian format, then retrieve value in native format and compare against 256

    new DataView(buffer).setInt16(0, 256, true);

    // result does not equal 256: native format is not little endian, convert byte positions to big endian

    if (new Int16Array(buffer)[0] !== 256) {
        rPos = 24 - rPos;
        gPos = 24 - gPos;
        bPos = 24 - bPos;
        aPos = 24 - aPos;
    }
})();

var rSelect = 0xFF << rPos;
var gSelect = 0xFF << gPos;
var bSelect = 0xFF << bPos;
var aSelect = 0xFF << aPos;
var rFilter = ~rSelect;
var gFilter = ~gSelect;
var bFilter = ~bSelect;
var aFilter = ~aSelect;

/**
 * radiant color prototype
 */
module Color = proto {

    value: 0,

    /**
     * constructor, takes 0, 1, 3 or 4 parameters
     *
     * @param finite r
     * @param finite g
     * @param finite b
     * @param finite a
     */
    constructor: func([ finite r = 255, finite g = 255, finite b = 255 ], [ finite a = 255 ]) {
        this.value = r << rPos | g << gPos | b << bPos | a << aPos;
    },

    /**
     * color red value ranging from 0-255
     */
    r: prop {
        set: func(finite color) {
            this.value = (this.value & rFilter) | (color << rPos);
        },
        get: func() {
            return (this.value & rSelect) >>> rPos;
        },
    },

    /**
     * color green value ranging from 0-255
     */
    g: prop {
        set: func(finite color) {
            this.value = (this.value & gFilter) | (color << gPos);
        },
        get: func() {
            return (this.value & gSelect) >>> gPos;
        },
    },

    /**
     * color blue value ranging from 0-255
     */
    b: prop {
        set: func(finite color) {
            this.value = (this.value & bFilter) | (color << bPos);
        },
        get: func() {
            return (this.value & bSelect) >>> bPos;
        },
    },

    /**
     * alpha value ranging from 0-255
     */
    a: prop {
        set: func(finite color) {
            this.value = (this.value & aFilter) | (color << aPos);
        },
        get: func() {
            return (this.value & aSelect) >>> aPos;
        },
    },

    /**
     * return CSS rgba representation of current color value
     *
     * @return string
     */
    toString: func() {
        return 'rgba(' + this.r + ',' + this.g + ',' + this.b + ',' + (this.a / 255).toFixed(3) + ')';
    },

    /**
     * return integer representation of current color value, optionally with modified alpha value
     *
     * @param finite alpha a
     * @return integer
     */
    toInteger: func(alpha) {
        if (typeof alpha === 'undefined') {
            return this.value;
        } else {
            return (this.value & aFilter) | (alpha << aPos);
        }
    },
};

/*
 * functions returning integer representation of given colors (range 0-255)
 */

export rgb = func(finite r, finite g, finite b) {
    return r << rPos | g << gPos | b << bPos | 255 << aPos;
};

export rgba = func(finite r, finite g, finite b, finite a) {
    return r << rPos | g << gPos | b << bPos | a << aPos;
};

export alpha = func(finite a) {
    return 255 << rPos | 255 << gPos | 255 << bPos | a << aPos;
};

export alphaPM = func(finite a) {
    return a << rPos | a << gPos | a << bPos | a << aPos;
};

export getAlpha = func(finite color) {
    return (color & aSelect) >>> aPos;
};

export setAlpha = func(finite color, finite a) {
    return (color & aFilter) | (a << aPos);
};

/*
 * functions returning integer representation of given colors (range 0.0-1.0)
 */

export rgb1 = func(finite r, finite g, finite b) {
    return (r*255) << rPos | (g*255) << gPos | (b*255) << bPos | 255 << aPos;
};

export rgba1 = func(finite r, finite g, finite b, finite a) {
    return (r*255) << rPos | (g*255) << gPos | (b*255) << bPos | (a*255) << aPos;
};

export alpha1 = func(finite a) {
    return 255 << rPos | 255 << gPos | 255 << bPos | (a*255) << aPos;
};

export alphaPM1 = func(finite a) {
    a*=255;
    return a << rPos | a << gPos | a << bPos | a << aPos;
};

export getAlpha1 = func(finite color) {
    return ((color & aSelect) >>> aPos) / 255;
};

export setAlpha1 = func(finite color, finite a) {
    return (color & aFilter) | ((a*255) << aPos);
};

/**
 * creates new color instance from integer
 *
 * @param integer 32 bit color integer
 */
export fromInteger = func(finite value) {

    return new Color((value & rSelect) >>> rPos,
                     (value & gSelect) >>> gPos,
                     (value & bSelect) >>> bPos,
                     (value & aSelect) >>> aPos);
};

/**
 * creates new color instance from given color temperature value
 * based on http://www.tannerhelland.com/4435/convert-temperature-rgb-algorithm-code/
 *
 * @param finite temperature
 * @param finite alpha
 */
export fromTemperature = func(finite temperature, finite alpha = 255) {

    var value = (temperature / 100) | 0;
    var red = 0, green = 0, blue = 0;

    if (value <= 66) {
        red = 255;
        green = (99.4708025861 * Math.log(value) - 161.1195681661) | 0;
    } else {
        red = (329.698727466 * Math.pow(value - 60, -0.1332047592)) | 0;
        green = (288.1221695283 * Math.pow(value - 60, -0.0755148492)) | 0;
    }

    if (value >= 66) {
        blue = 255;
    } else if (value <= 19) {
        blue = 0;
    } else {
        blue = (138.5177312231 * Math.log(value - 10) - 305.0447927307) | 0;
    }

    return new Color(Math.max(0, Math.min(255, red)),
                     Math.max(0, Math.min(255, green)),
                     Math.max(0, Math.min(255, blue)),
                     alpha);
};

/*
 * some pre-built colors
 */

export WHITE = rgb(255, 255, 255);
export BLACK = rgb(0, 0, 0);
export RED = rgb(255, 0, 0);
export GREEN = rgb(0, 255, 0);
export BLUE = rgb(0, 0, 255);
export YELLOW = rgb(255, 255, 0);
export ORANGE = rgb(255, 128, 0);
export PURPLE = rgb(255, 0, 255);
export CYAN = rgb(0, 255, 255);
