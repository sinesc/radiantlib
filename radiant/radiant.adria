/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Listenable = require('astd/listenable');
var ShaderManager = require('./shader_manager');
var GL = window.WebGLRenderingContext;

interface Radiant;
export Sprite = require('./sprite');
export Sprites = require('./renderer/sprites');
export Font = require('./font');
export Text = require('./renderer/text');
export Color = require('./color');
export Scene = require('./scene');

export BlendMode = proto {
    public source      : GL.ONE,
    public destination : GL.ZERO,
    public order       : 0,
    public constructor: func(finite source, finite destination, finite order = 0) {
        this.source = source;
        this.destination = destination;
        this.order = order;
    },
};

/**
 * radiant 2d context
 *
 * @event contextlost
 * @event contextrestored
 * @event resize
 */
module Radiant = proto (Listenable) {

    public BLENDMODE: {
        COPY    : new BlendMode(GL.SRC_ALPHA,           GL.ONE_MINUS_SRC_ALPHA, 4),
        NO_ALPHA: new BlendMode(GL.ONE,                 GL.ZERO,                0),
        LIGHTEN : new BlendMode(GL.SRC_ALPHA,           GL.ONE,                 5),
        OVERLAY : new BlendMode(GL.SRC_ALPHA,           GL.ONE_MINUS_SRC_COLOR, 6),
        OUTLINE : new BlendMode(GL.ONE_MINUS_SRC_ALPHA, GL.ONE,                 3),
        EDGES   : new BlendMode(GL.DST_ALPHA,           GL.ONE_MINUS_SRC_ALPHA, 2),
        MASK    : new BlendMode(GL.CONSTANT_COLOR,      GL.ONE_MINUS_SRC_ALPHA, 1),
    },

    public canvas   : null,
    public gl       : null,

    protected sm    : null,

    protected clearR: 0.0,
    protected clearG: 0.0,
    protected clearB: 0.0,
    protected clearA: 1.0,

    /**
     * construct new radiant context
     *
     * @param finite width
     * @param finite height
     * @param boolean transparent create transparent gl context
     * @param boolean antialiasing
     * @param HTMLCanvasElement canvas
     */
    public constructor: func(finite width, finite height, boolean transparent = false, boolean antialiasing = false, canvas = null) {

        this.canvas = canvas !== null ? canvas : document.createElement('canvas');

        // forward events as Listenable events

        this.canvas.addEventListener('webglcontextlost', this.forward('contextlost'), false);
        this.canvas.addEventListener('webglcontextrestored', this.forward('contextrestored'), false);

        // create webgl context with given options

        var options = {
            alpha                   : transparent,
            antialias               : antialiasing,
            preserveDrawingBuffer   : true
            /*premultipliedAlpha  : false,
            stencil             : true*/
        };

        try {
            this.gl = this.canvas.getContext('experimental-webgl', options);
        } catch (e) {
            try {
                this.gl = this.canvas.getContext('webgl', options);
            } catch (e) {
                throw new Exception('Error initializing webgl context');
            }
        }

        this.setSize(width, height);

        // enable disable unused/required features

        var gl = this.gl;
        gl.enable(gl.BLEND);
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.CULL_FACE);

        this.blendMode = this.BLENDMODE.COPY;
        this.sm = new ShaderManager(this);
    },

    /**
     * sets the scenes clear color
     *
     * @param Color/integer color
     */
    public clearColor: func(color = Color.BLACK) {

        var tmp = color instanceof Color ? color : Color.fromInteger(color);
        this.clearR = tmp.r / 256;
        this.clearG = tmp.g / 256;
        this.clearB = tmp.b / 256;
        this.clearA = tmp.a / 256;
    },

    /**
     * clears the scene using the current clear color
     */
    public clear: func() {

        this.gl.clearColor(this.clearR, this.clearG, this.clearB, this.clearA);
        this.gl.clear(this.gl.COLOR_BUFFER_BIT);
    },


    /**
     * get/set blendmode (@see Radiant::BLENDMODE)
     *
     * @param Array mode
     */
    blendMode: prop {
        set: func(BlendMode mode) {
            this.gl.blendFunc(mode.source, mode.destination);
            storage = mode;
        },
        get: func() {
            return storage;
        }
    },

    /**
     * set canvas size
     *
     * @param finite width
     * @param finite height
     */
    setSize: func(finite width, finite height) {

        this.canvas.width = width;
        this.canvas.height = height;
        this.gl.viewport(0, 0, width, height);
        this.execute('resize', width, height);
    },

    /**
     * get/set canvas width
     */
    width: prop {
        set: func(value) {
            if (value !== this.canvas.width) {
                this.canvas.width = value;
                this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);
                this.execute('resize', this.canvas.width, this.canvas.height);
            }
        },
        get: func() {
            return this.canvas.width;
        }
    },

    /**
     * get/set canvas height
     */
    height: prop {
        set: func(value) {
            if (value !== this.canvas.height) {
                this.canvas.height = value;
                this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);
                this.execute('resize', this.canvas.width, this.canvas.height);
            }
        },
        get: func() {
            return this.canvas.height;
        }
    },
};