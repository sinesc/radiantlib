/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var Listenable = require('astd/listenable');
var BlendMode = require('./blend_mode');
var Color = require('./color');
var IndexBuffer = require('./buffer/index');
var GL = window.WebGLRenderingContext;

import WebGLDebugUtils;

/**
 * radiant 2d context
 *
 * @event contextlost
 * @event contextrestored
 * @event resize
 */
module Radiant = proto (Listenable) {

    public BLENDMODE: null,

    public canvas   : null,
    public gl       : null,
    public index    : null,

    public currentBlendMode: null,
    public currentTextures: null,
    public currentShader: null,
    public currentAttributeStates: null,
    public currentElementBuffer: null,
    public currentArrayBuffer: null,

    /**
     * construct new radiant context
     *
     * @param finite width
     * @param finite height
     * @param boolean transparent create transparent gl context
     * @param boolean antialiasing
     * @param HTMLCanvasElement canvas
     */
    public constructor: func(finite width, finite height, boolean transparent = false, boolean antialiasing = false, canvas = null) {

        if (canvas !== null) {
            this.canvas = canvas;
        } else {
            this.canvas = document.createElement('canvas');

//this.canvas = WebGLDebugUtils.makeLostContextSimulatingCanvas(this.canvas);
//window.rcanvas = this.canvas;

            if (transparent !== true) {
                this.canvas.setAttribute('moz-opaque', '');
            }
        }

        // handle context loss/restore events

        this.canvas.addEventListener('webglcontextlost', this, false);
        this.canvas.addEventListener('webglcontextrestored', this, false);

        // create webgl context with given options

        var options = {
            alpha                   : transparent,
            antialias               : antialiasing,
            preserveDrawingBuffer   : true
            /*premultipliedAlpha  : false,
            stencil             : true*/
        };

        try {
            this.gl = this.canvas.getContext('webgl', options);
        } catch (e) {
            try {
                this.gl = this.canvas.getContext('experimental-webgl', options);
            } catch (e) {
                throw new Exception('Error initializing webgl context');
            }
        }

//this.gl = WebGLDebugUtils.makeDebugContext(this.gl);

        this.index = new IndexBuffer(this);
        this.setupBlendModes();
        this.setSize(width, height);
        this.restoreContext();
    },

    public handleEvent: func(event) {

        if (event.type === 'webglcontextlost') {
            event.preventDefault();
            this.execute('contextlost');
        } else if (event.type === 'webglcontextrestored') {
            this.restoreContext();
            this.execute('contextrestored');
        }
    },

    /**
     * register blendmodes with radiant
     */
    protected setupBlendModes: func() {

        this.BLENDMODE = {
            COPY    : new BlendMode(this, GL.SRC_ALPHA,           GL.ONE_MINUS_SRC_ALPHA, 4),
            NO_ALPHA: new BlendMode(this, GL.ONE,                 GL.ZERO,                0),
            LIGHTEN : new BlendMode(this, GL.SRC_ALPHA,           GL.ONE,                 5),
            OVERLAY : new BlendMode(this, GL.SRC_ALPHA,           GL.ONE_MINUS_SRC_COLOR, 6),
            OUTLINE : new BlendMode(this, GL.ONE_MINUS_SRC_ALPHA, GL.ONE,                 3),
            EDGES   : new BlendMode(this, GL.DST_ALPHA,           GL.ONE_MINUS_SRC_ALPHA, 2),
            MASK    : new BlendMode(this, GL.CONSTANT_COLOR,      GL.ONE_MINUS_SRC_ALPHA, 1),
        };
    },

    /**
     * called once gl-context has been restored
     */
    public restoreContext: func() {

        var gl = this.gl;
        gl.enable(gl.BLEND);
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.CULL_FACE);
        gl.viewport(0, 0, this.canvas.width, this.canvas.height);

        this.clearColor = this.clearColor;  // reapply clear color
        this.currentBlendMode = null;
        this.currentShader = null;
        this.currentTextures = [ null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null ];
        this.currentAttributeStates = [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
    },

    /**
     * sets the scenes clear color
     *
     * @param Color/integer color
     */
    public clearColor: prop {
        default: Color.BLACK,
        set: func(value) {
            storage = value instanceof Color ? value : Color.fromInteger(value);
            this.gl.clearColor(storage.r / 255, storage.g / 255, storage.b / 255, storage.a / 255);
        },
        get: func() {
            return storage;
        },
    },

    /**
     * clears the scene using the current clear color
     */
    public clear: func() {
        this.gl.clear(this.gl.COLOR_BUFFER_BIT);
    },

    /**
     * set canvas size
     *
     * @param finite width
     * @param finite height
     */
    public setSize: func(finite width, finite height) {

        this.canvas.width = width;
        this.canvas.height = height;
        this.gl.viewport(0, 0, width, height);
        this.execute('resize', width, height);
    },

    /**
     * get/set canvas width
     */
    public width: prop {
        set: func(value) {
            if (value !== this.canvas.width) {
                this.canvas.width = value;
                this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);
                this.execute('resize', this.canvas.width, this.canvas.height);
            }
        },
        get: func() {
            return this.canvas.width;
        }
    },

    /**
     * get/set canvas height
     */
    public height: prop {
        set: func(value) {
            if (value !== this.canvas.height) {
                this.canvas.height = value;
                this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);
                this.execute('resize', this.canvas.width, this.canvas.height);
            }
        },
        get: func() {
            return this.canvas.height;
        }
    },
};
