/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Texture = require('../texture');
var Color = require('../color');

module TextureData = proto (Texture) {

    public data: null,

    public constructor: func(object radiant, finite width, finite height, Array colors) {

        Texture->constructor(radiant, width, height, colors);
    },

    public destroy: func() {

        Texture->destroy();
        this.data = null;
    },

    /**
     * create texture strip from color data
     *
     * @param object source
     */
    protected setup: func(finite width, finite height, Array colors) {

        this.width = width;
        this.height = height;

        var data = new Uint8Array(colors.length * 4);
        var color = new Color();

        for (var i = 0, len = colors.length; i < len; ++i) {

            var raw = colors[i];
            color.value = typeof raw === 'number' ? raw : raw.value;

            data[i*4]     = color.r;
            data[i*4+1]   = color.g;
            data[i*4+2]   = color.b;
            data[i*4+3]   = color.a;
        }

        this.data = data;
    },

    /**
     * (re)creates texture object from current canvas
     */
    public restoreContext: func() {

        Texture->restoreContext();
        var gl = this.radiant.gl;
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);
    },
};
