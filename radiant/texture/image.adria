/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Texture = require('../texture');

module TextureImage = proto (Texture) {

    public canvas: null,

    public constructor: func(object radiant, object source) {

        Texture->constructor(radiant, source);
    },

    public destroy: func() {

        Texture->destroy();
        this.canvas = null;
    },

    /**
     * create power of 2 sized canvas from image source
     *
     * @param object source
     */
    protected setup: func(object source) {

        this.width = source.width;
        this.height = source.height;

        this.canvas = document.createElement('canvas');
        this.canvas.width = this.nextPowerOfTwo(source.width);
        this.canvas.height = this.nextPowerOfTwo(source.height);
        var ctx = this.canvas.getContext('2d');
        ctx.drawImage(source, 0, 0);
    },

    /**
     * (re)creates texture object from current canvas
     */
    restoreContext: func() {

        Texture->restoreContext();
        var gl = this.radiant.gl;
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.canvas);
    },

    /**
     * converts array of given x/y coodinate into texture uv coordinate
     *
     * @param finite x
     * @param finite y
     * @return Array u, v
     */
    getUV: func(finite x, finite y) {
        return [ x / this.canvas.width, y / this.canvas.height ];
    },
};
