/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Texture = require('../texture');
var TextureImage = require('../texture/image');
var Listenable = require('astd/listenable');

module TextureFile = proto (TextureImage) mixin (Listenable) {

    public ready: false,

    public constructor: func(object radiant, string file) {

        // load image

        var that = this;
        var image = document.createElement('img');
        image.src = file;

        image.addEventListener('load', func listener() {
            image.removeEventListener('load', listener);
            that.ready = true;
            that.setup(image);
            that.restoreContext();
            that.execute('load');
        });

        Texture->constructor(radiant, null);
    },

    /**
     * create power of 2 sized canvas from image source
     *
     * @param object source
     */
    protected setup: func(object? source) {

        if (this.ready) {
            TextureImage->setup(source);
        }
    },

    /**
     * (re)creates texture object from current canvas
     */
    protected restoreContext: func() {

        if (this.ready) {
            TextureImage->restoreContext();
        }
    },
};
