/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var uniqueId = 0;

module Texture = proto {

    public id       : 0,
    public radiant  : null,
    public handle   : null,
    public width    : 0,
    public height   : 0,

    public constructor: func(object radiant, ...args) {

        this.radiant = radiant;
        this.id = uniqueId++;
        this.setup.apply(this, args);
        this.restoreContext();
        this.radiant.on('contextrestored', this, this.restoreContext);
    },

    public destroy: func() {

        this.radiant.off('contextrestored', this, this.restoreContext);
        this.radiant.gl.deleteTexture(this.handle);
        this.radiant = null;
        this.canvas = null;
        this.handle = null;
    },

    /**
     * create texture source, set width and height
     */
    protected setup: func() { },

    /**
     * (re)creates texture object from stored data
     */
    public restoreContext: func() {

        var gl = this.radiant.gl;

        this.handle = gl.createTexture();
        //gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, this.handle);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        // texImage here
    },

    /**
     * select this texture for given texture unit
     */
    public use: func(finite unit = 0) {

        if (this.radiant.currentTextures[unit] != this) {
            var gl = this.radiant.gl;
            gl.activeTexture(gl.TEXTURE0 + unit);
            gl.bindTexture(gl.TEXTURE_2D, this.handle);
        }
    },

    /**
     * returns the closest next power of two for value
     *
     * @param finite value
     * @return finite
     */
    protected nextPowerOfTwo: func(value) {
        return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
    },
};
