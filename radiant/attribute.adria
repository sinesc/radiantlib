/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var GL = window.WebGLRenderingContext;
var typeSize = { };
typeSize[GL.BYTE]             = 1;
typeSize[GL.UNSIGNED_BYTE]    = 1;
typeSize[GL.SHORT]            = 2;
typeSize[GL.UNSIGNED_SHORT]   = 2;
typeSize[GL.FIXED]            = 4;
typeSize[GL.FLOAT]            = 4;

module Attribute = proto {

    shader      : null,
    srcName     : '',
    parts       : 0,
    type        : 0,
    normalized  : false,
    location    : 0,
    size        : 0,

    constructor: func(shader, srcName, parts, type, normalized) {

        var gl = shader.radiant.gl;

        this.shader = shader;
        this.srcName = srcName;
        this.parts = parts;
        this.type = type;
        this.normalized = normalized;
        this.location = gl.getAttribLocation(shader.program, srcName);
        this.size = parts * typeSize[type];
        gl.enableVertexAttribArray(this.location);
    },

    use: func(finite size, finite offset) {

        var gl = this.shader.radiant.gl;
        gl.enableVertexAttribArray(this.location);
        gl.vertexAttribPointer(this.location, this.parts, this.type, this.normalized, size, offset);
        return this.size;
    },

    restoreContext: func() {

        var gl = this.shader.radiant.gl;
        this.location = gl.getAttribLocation(this.shader.program, this.srcName);
        gl.enableVertexAttribArray(this.location);
    },

};
