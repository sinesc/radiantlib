/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Renderer = require('./renderer');
var Texture = require('./texture');
var Color = require('./color');

module Emitter = proto {

    public texture  : null,
    public ramp     : null,
    public data     : null,
    public size     : 0,
    public baseTime : 0,

    protected renderer: null,

    protected corners: [
        [+0.5, +0.5],
        [-0.5, +0.5],
        [-0.5, -0.5],
        [+0.5, -0.5],
    ],

    protected defaults: {
        startTime   : 0.0,
        timeToLive  : 1.0,
        startSize   : 1.0,
        endSize     : 1.0,
        originX     : 0.0,
        originY     : 0.0,
        velocity    : 1.0,
        acceleration: 0.0,
        angle       : 0.0,
        rotation    : 0.0,
        color       : Color.WHITE
    },

    public constructor: func(Renderer renderer, Texture texture, Texture ramp) {
        this.renderer = renderer;
        this.texture = texture;
        this.ramp = ramp;
    },

    public createParticles: func(finite particles, object rawOptions) {

        var corners = this.corners;
        var range = this.range;
        var options = this.normalizeOptions(rawOptions);
        var fdata = new Float32Array(particles * this.renderer.shader.attributeSize /* / 4 (floats) * 4 (corners) */);
        var idata = new Uint32Array(fdata.buffer);
        var index = 0;

        for (var particle = 0; particle < particles; ++particle) {

            var startTime = range(options.startTime);
            var timeToLive = range(options.timeToLive);
            var startSize = range(options.startSize);
            var endSize = range(options.endSize);
            var originX = range(options.originX);
            var originY = range(options.originY);
            var velocity = range(options.velocity);
            var acceleration = range(options.acceleration);
            var angle = range(options.angle);
            var rotation = range(options.rotation);
            var color = options.color.random();

            for (var corner = 0; corner < 4; ++corner) {

                fdata[index++] = startTime;
                fdata[index++] = timeToLive;
                fdata[index++] = startSize;
                fdata[index++] = endSize;
                fdata[index++] = originX;
                fdata[index++] = originY;
                fdata[index++] = corners[corner][0];
                fdata[index++] = corners[corner][1];
                fdata[index++] = velocity;
                fdata[index++] = acceleration;
                fdata[index++] = angle;
                fdata[index++] = rotation;
                idata[index++] = color;
            }
        }

        this.data = fdata;
        this.size = particles;
    },

    protected range: func(Array values) {

        var distance = values[1] - values[0];
        return Math.random() * distance + values[0];
    },

    protected normalizeOptions: func(object options) {

        var result = Object.create(null);

        for (var field, defaultValue in this.defaults) {

            var item = new Array(2);

            if (options[field] instanceof Array) {
                item[0] = options[field].length > 0 ? options[field][0] : defaultValue;
                item[1] = options[field].length > 1 ? options[field][1] : defaultValue;
            } else {
                item[0] = options[field];
                item[1] = options[field];
            }

            result[field] = item;
        }

        return result;
    },

};
