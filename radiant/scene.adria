/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Color = require('./color');
var Text = require('./renderer/text');
var Sprites = require('./renderer/sprites');
var util = require('astd/util');

var PoolItem = proto {
    order       : 0,
    blendMode   : null,
    sprite      : null,
    frameId     : 0,
    x           : 0,
    y           : 0,
    color       : 0,
    rotation    : 0.0,
    scaleX      : 0.0,
    scaleY      : 0.0,
};

module Scene = proto {

    protected ORDER_BLENDMODE: 1000,
    protected ORDER_LAYER: 10 * self::ORDER_BLENDMODE,

    protected text: null,
    protected sprites: null,

    protected radiant: null,
    protected drawPool: null,
    protected drawId: 0,

    public screenOffsetX: 0,
    public screenOffsetY: 0,

    /**
     * increased for each item to draw
     */
    protected debugDrawCount: 0,

    /**
     * creates a new scene
     *
     * @param Radiant radiant
     * @param finite poolSize
     */
    public constructor: func(object radiant, finite poolSize = 15000) {

        this.radiant = radiant;
        this.text = new Text(this.radiant);
        this.sprites = new Sprites(this.radiant);

        this.drawPool = [ ];

        for (var i = 0; i < poolSize; i++) {
            this.drawPool[i] = new PoolItem();
        }
    },

    /**
     * sets the scene's screen offset. this offset is passed via uniform to the shader,
     * so it affects the scene even when a vertex buffers have not been updated (i.e. in the case of particles)
     *
     * @param integer x
     * @param integer y
     */
    public setScreenOffset: func(finite x = 0, finite y = 0) {
        this.screenOffsetX = x;
        this.screenOffsetY = y;
    },

    /**
     * adds a sprite to the scene
     *
     * @param integer layer
     * @param object blendMode
     * @param Sprite sprite
     * @param integer frameId
     * @param integer x
     * @param integer x
     * @param Color color
     * @param finite rotation
     * @param finite scaleX
     * @param finite scaleY
     */
    public addSprite: func(finite layer, object blendMode, object sprite, finite frameId, finite x, finite y, color = Color.WHITE, finite rotation = 0.0, finite scaleX = 1.0, finite scaleY = scaleX) {

        if (sprite.ready !== true) {
            return;
        }

        // grab a pre-created array from the pool and fill it with the sprite parameters

        var drawId = this.drawId++;
        var poolItem = this.drawPool[drawId];
        var textureId = sprite.texture.id;
        var order = layer * this.ORDER_LAYER + blendMode.order * this.ORDER_BLENDMODE + textureId;

        poolItem.order      = parseInt(order);
        poolItem.blendMode  = blendMode;
        poolItem.sprite     = sprite;
        poolItem.frameId    = parseInt(frameId);
        poolItem.x          = parseInt(x);
        poolItem.y          = parseInt(y);
        poolItem.color      = parseInt(typeof color === 'number' ? color : color.value);
        poolItem.rotation   = rotation;
        poolItem.scaleX     = scaleX;
        poolItem.scaleY     = scaleY;

        this.drawPool[drawId] = poolItem;
        this.debugDrawCount++;
    },

    protected sortSprites: func() {

        util.flashSortObjects(this.drawPool, this.drawId);
    },

    public draw: func() {

        var drawPool = this.drawPool;
        var drawId = this.drawId;

        this.sortSprites();
        this.sprites.setScreenOffset(this.screenOffsetX, this.screenOffsetY);

        for (var i = 0; i < drawId; ++i) {
            var arg = drawPool[i];
            this.sprites.add(arg.blendMode, arg.sprite, arg.frameId, arg.x, arg.y, arg.color, arg.rotation, arg.scaleX, arg.scaleY);
        }

        this.sprites.draw();
        this.drawId = 0;
    },
};
