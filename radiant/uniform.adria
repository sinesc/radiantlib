/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
module Uniform = proto {

    shader      : null,
    srcName     : '',
    parts       : 0,
    isMatrix    : false,
    isFloat     : true,
    location    : 0,
    funcName    : '',

    constructor: func(shader, srcName, parts, isMatrix, isFloat) {

        this.shader = shader;
        this.srcName = srcName;
        this.parts = parts;
        this.isMatrix = isMatrix;
        this.isFloat = isFloat;
        this.location = shader.radiant.gl.getUniformLocation(shader.program, srcName);

        if (isMatrix) {
            assert(parts >= 2 && parts <= 4);
            assert(isFloat === true);
            this.funcName = 'uniformMatrix' + parts + 'fv';
        } else {
            assert(parts >= 1 && parts <= 4);
            this.funcName = 'uniform' + parts + (isFloat ? 'f' : 'i') + (parts > 1 ? 'v' : '');
        }
    },

    value: prop {
        set: func(val) {
            assert(this.parts === 1 || (this.isFloat && val instanceof Float32Array) || (this.isFloat === false && val instanceof Int32Array));
            assert(this.parts > 1 || isFinite(val));
            storage = val;            
            if (this.shader.radiant.currentShader === this.shader) {
                this.use();
            }
        },
        get: func() {
            assert(this.parts === 1 || (this.isFloat && storage instanceof Float32Array) || (this.isFloat === false && storage instanceof Int32Array));
            assert(this.parts > 1 || isFinite(storage));
            return storage;
        }
    },

    use: func() {

        var gl = this.shader.radiant.gl;

        if (this.isMatrix) {
            gl[this.funcName](this.location, false, this.value);
        } else {
            gl[this.funcName](this.location, this.value);
        }
    },

    restoreContext: func() {

        var gl = this.shader.radiant.gl;
        this.location = gl.getUniformLocation(this.shader.program, this.srcName);
        this.use();
    },
};
