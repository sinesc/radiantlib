/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var GL = window.WebGLRenderingContext;

module Uniform = proto {

    public INT          : GL.INT,
    public FLOAT        : GL.FLOAT,

    public MATRIX       : 67,
    public ARRAY        : 73,
    public VALUE        : 77,

    protected shader    : null,
    protected srcName   : '',
    protected parts     : 0,
    protected isFloat   : false,
    protected isMatrix  : false,
    protected isArray   : false,
    protected location  : 0,
    protected funcName  : '',

    public constructor: func(object shader, string srcName, finite type = self::INT, finite parts = 1, finite layout = self::VALUE) {

        this.shader     = shader;
        this.srcName    = srcName;
        this.parts      = parts;
        this.isFloat    = type === self::FLOAT;
        this.isMatrix   = layout === self::MATRIX;
        this.isArray    = layout === self::ARRAY;
        this.location   = shader.radiant.gl.getUniformLocation(shader.program, srcName);

        if (this.isMatrix) {
            assert(parts >= 2 && parts <= 4);
            assert(this.isFloat === true);
            this.funcName = 'uniformMatrix' + parts + 'fv';
        } else if (this.isArray) {
            assert(parts >= 1 && parts <= 4);
            this.funcName = 'uniform' + parts + (this.isFloat ? 'f' : 'i') + 'v';
        } else {
            assert(parts >= 1 && parts <= 4);
            this.funcName = 'uniform' + parts + (this.isFloat ? 'f' : 'i');
        }
    },

    public name: prop {
        get: func() {
            return this.srcName;
        }
    },

    /**
     * @var boolean allow shader use even if it is the current shader, resets after use
     */
    public dirty: prop {

        get: func() {
            return storage;
        },
        set: func(value) {
            storage = value;
            if (value) {
                this.shader.dirty = true;
            }
        }
    },

    public value: prop {
        set: func(val) {
            assert(this.parts === 1 || (this.isFloat && val instanceof Float32Array) || (this.isFloat === false && val instanceof Int32Array));
            assert(this.parts > 1 || isFinite(val));
            storage = val;
            if (this.shader.radiant.currentShader === this.shader) {
                this.use();
            } else {
                this.dirty = true;
            }
        },
        get: func() {
            assert(this.parts === 1 || (this.isFloat && storage instanceof Float32Array) || (this.isFloat === false && storage instanceof Int32Array));
            assert(this.parts > 1 || isFinite(storage));
            return storage;
        }
    },

    public use: func() {

        var gl = this.shader.radiant.gl;
        var parts = this.parts;

        if (this.isMatrix) {
            gl[this.funcName](this.location, false, this.value);
        } else if (this.isArray) {
            gl[this.funcName](this.location, this.value);
        } else {
            if (parts === 1) {
                gl[this.funcName](this.location, this.value);
            } else if (parts === 2) {
                gl[this.funcName](this.location, this.value[0], this.value[1]);
            } else if (parts === 3) {
                gl[this.funcName](this.location, this.value[0], this.value[1], this.value[2]);
            } else if (parts === 4) {
                gl[this.funcName](this.location, this.value[0], this.value[1], this.value[2], this.value[3]);
            }
        }

        this.dirty = false;
    },

    public restoreContext: func() {

        var gl = this.shader.radiant.gl;
        this.location = gl.getUniformLocation(this.shader.program, this.srcName);
        this.use();
    },
};
