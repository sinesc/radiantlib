/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Renderer = require('../renderer');
var Particle = require('../shader/particle');

module Particles = proto (Renderer) {

    protected Shader: Particle,
    protected textureUnit: 2,
    protected rampUnit: 3,
    protected ramp: null,

    /**
     * add an emitter
     *
     * @param BlendMode blendMode
     * @param Emitter emitter
     * @param finite localTime local particlespace time
     * @param finite x
     * @param finite y
     */
    public add: func(object blendMode, object emitter, finite localTime, finite x, finite y) {

        this.blendMode  = blendMode;
        this.texture    = emitter.texture;
        this.ramp       = emitter.ramp;
        this.vertices   = emitter.vertices;
        this.size       = emitter.size;

        //!todo ugly, needs concept

        this.screenOffsetX += x;
        this.screenOffsetY += y;
        this.shader.uNow.value = localTime;
        this.draw();
        this.screenOffsetX -= x;
        this.screenOffsetY -= y;

        ++this.debugItemDrawCount;
    },

    /**
     * upload vertices to gl buffer
     */
    protected uploadVertices: func() {

        this.vertices.use();
    },

    /**
     * select shader, blendmode and texture
     */
    protected useResources: func() {

        Renderer->useResources();
        this.ramp.use(this.rampUnit);
    },

    /**
     * assign sampler unit for ramp texture
     */
    protected setupUniforms: func() {

        Renderer->setupUniforms();
        this.shader.uRamp.value = this.rampUnit;
    },

    /**
     * overrides vertex buffer initialization. particler renderer doesn't need its own buffer
     */
    protected initVertices: func() {
        
        this.vertices = null;
    },
};
