/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Renderer = require('../renderer');
var Particle = require('../shader/particle');
import Map;

module Particles = proto (Renderer) {

    protected Shader: Particle,
    protected textureUnit: 2,
    protected rampUnit: 3,

    protected ramp: null,
    protected emitters: null,

    /**
     * don't remove particles after draw
     */
    protected drawResets: false,

    /**
     * creates a new particle renderer
     *
     * @param Radiant radiant
     */
    public constructor: func(object radiant) {

        Renderer->constructor(radiant);
        this.emitters = new Map();
    },

    /**
     * add an emitter
     *
     * @param BlendMode blendMode
     * @param Emitter emitter
     * @param finite x
     * @param finite y
     */
    public add: func(object blendMode, object emitter, finite x, finite y) {

        this.setupState(blendMode, emitter.texture, emitter.ramp);
        this.vertices.floatView.set(emitter.data, this.size * 4);
        this.size += emitter.size;
    },

    /**
     * select shader, blendmode and texture
     */
    protected useResources: func() {

        Renderer->useResources();
        this.ramp.use(this.rampUnit);
    },

    /**
     * set up drawing state for given texture and current blendmode
     *
     * @param BlendMode blendMode
     * @param Texture texure
     * @param Texture ramp
     */
    protected setupState: func(object blendMode, object texture, object ramp) {

        if (this.blendMode !== blendMode || this.texture !== texture || this.ramp !== ramp) {
            this.draw();
            this.blendMode = blendMode;
            this.texture = texture;
            this.ramp = ramp;
        }
    },

    /**
     * assign sampler unit for ramp texture
     */
    protected setupUniforms: func() {

        Renderer->setupUniforms();
        this.shader.uRamp.value = this.rampUnit;
    },
};
