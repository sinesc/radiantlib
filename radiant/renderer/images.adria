/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Renderer = require('../renderer');
var Plain = require('../shader/plain');
var Color = require('radiant/color');

module Images = proto (Renderer) {

    protected Shader: Plain,

    /**
     * add an image to be drawn
     *
     * @param BlendMode blendMode
     * @param Texture texture
     * @param finite sx
     * @param finite sy
     * @param finite sw
     * @param finite sh
     * @param finite dx
     * @param finite dy
     * @param finite dw
     * @param finite dh
     * @param finite rotation
     * @param finite color
     */
    public add: func(object blendMode, object texture, [ finite sx = 0, finite sy = 0, finite sw = dw, finite sh = dh ], finite dx, finite dy, finite dw, finite dh, [ finite rotation = 0.0, finite color = Color.WHITE ]) {

        this.setupState(blendMode, texture);

        var index = this.size * this.shader.attributeSize;
        var floatView = this.vertices.floatView;
        var intView = this.vertices.intView;

        // texture coordinates

        var uMax = texture.getMaxU();
        var vMax = texture.getMaxV();

        var u0 = sx / texture.width * uMax;
        var u1 = u0 + sw / texture.width * uMax;

        var v0 = sy / texture.height * vMax;
        var v1 = v0 + sh / texture.height * vMax;

        // corner positions relative to dx/dy

        var offsetX0 = 0;
        var offsetX1 = dw;
        var offsetY0 = 0;
        var offsetY1 = dh;

        // bottom right

        floatView[index++] = dx;
        floatView[index++] = dy;
        floatView[index++] = offsetX1;
        floatView[index++] = offsetY1;
        floatView[index++] = u1;
        floatView[index++] = v1;
        intView[index++] = color;
        floatView[index++] = rotation;

        // bottom left

        floatView[index++] = dx;
        floatView[index++] = dy;
        floatView[index++] = offsetX0;
        floatView[index++] = offsetY1;
        floatView[index++] = u0;
        floatView[index++] = v1;
        intView[index++] = color;
        floatView[index++] = rotation;

        // top left

        floatView[index++] = dx;
        floatView[index++] = dy;
        floatView[index++] = offsetX0;
        floatView[index++] = offsetY0;
        floatView[index++] = u0;
        floatView[index++] = v0;
        intView[index++] = color;
        floatView[index++] = rotation;

        // top right

        floatView[index++] = dx;
        floatView[index++] = dy;
        floatView[index++] = offsetX1;
        floatView[index++] = offsetY0;
        floatView[index++] = u1;
        floatView[index++] = v0;
        intView[index++] = color;
        floatView[index++] = rotation;

        ++this.size;

        ++this.debugItemDrawCount;
    },

    protected setupUniforms: func() {

        Renderer->setupUniforms();
        this.shader.uTextureMaxUV.value = Float32Array.from([ 1.0, 1.0 ]);
    },

    protected setupState: func(object blendMode, object texture) {

        var textureChanged = this.texture !== texture;

        Renderer->setupState(blendMode, texture);

        if (textureChanged) {
            this.shader.uTextureMaxUV.value[0] = texture.getMaxU();
            this.shader.uTextureMaxUV.value[1] = texture.getMaxV();
            this.shader.uTextureMaxUV.dirty = true;
        }
    },
};
