/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Renderer = require('../renderer');
var Plain = require('../shader/plain');

module Sprites = proto (Renderer) {

    protected Shader: Plain,

    /**
     * add a sprite to be drawn
     *
     * @param BlendMode blendMode
     * @param Sprite sprite
     * @param integer frameId
     * @param finite x
     * @param finite y
     * @param finite color
     * @param finite rotation
     * @param finite scaleX
     * @param finite scaleY
     */
    public add: func(object blendMode, object sprite, finite frameId, finite x, finite y, finite color, finite rotation, finite scaleX, finite scaleY) {

        this.setupState(blendMode, sprite.texture);

        var index = this.size * this.shader.attributeSize;
        var floatView = this.vertices.floatView;
        var intView = this.vertices.intView;
        var frame = sprite.frames[frameId];

        // corner positions relative to x/y

        var offsetX0 = (-sprite.anchorX) * scaleX;
        var offsetX1 = (sprite.width - sprite.anchorX) * scaleX;
        var offsetY0 = (-sprite.anchorY) * scaleY;
        var offsetY1 = (sprite.height - sprite.anchorY) * scaleY;

        // bottom right

        floatView[index++] = x;
        floatView[index++] = y;
        floatView[index++] = offsetX1;
        floatView[index++] = offsetY1;
        floatView[index++] = frame.u1;
        floatView[index++] = frame.v1;
        intView[index++] = color;
        floatView[index++] = rotation;

        // bottom left

        floatView[index++] = x;
        floatView[index++] = y;
        floatView[index++] = offsetX0;
        floatView[index++] = offsetY1;
        floatView[index++] = frame.u0;
        floatView[index++] = frame.v1;
        intView[index++] = color;
        floatView[index++] = rotation;

        // top left

        floatView[index++] = x;
        floatView[index++] = y;
        floatView[index++] = offsetX0;
        floatView[index++] = offsetY0;
        floatView[index++] = frame.u0;
        floatView[index++] = frame.v0;
        intView[index++] = color;
        floatView[index++] = rotation;

        // top right

        floatView[index++] = x;
        floatView[index++] = y;
        floatView[index++] = offsetX1;
        floatView[index++] = offsetY0;
        floatView[index++] = frame.u1;
        floatView[index++] = frame.v0;
        intView[index++] = color;
        floatView[index++] = rotation;

        this.size++;
    },
};
