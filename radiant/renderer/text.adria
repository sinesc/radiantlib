/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Renderer = require('../renderer');
var Plain = require('../shader/plain');
var Color = require('../color');

module Text = proto (Renderer) {

    Shader: Plain,
    textureUnit: 1,

    /**
     * add a sprite to be drawn
     *
     * @param Font font
     * @param string text
     * @param finite x
     * @param finite y
     * @param finite color
     * @param finite rotation
     * @param finite scaleX
     * @param finite scaleY
     */
    write: func(object font, string text, finite x, finite y, color = Color.WHITE, finite rotation = 0.0, finite scaleX = 1.0, finite scaleY = scaleX) {

        this.setupState(font.texture);

        var index = this.size * this.shader.attributeSize;
        var vertices = this.vertices;
        var intView = this.vertexIntView;
        var characters = font.characters;
        var colorValue = typeof color === 'number' ? color : color.value;

        var offsetX0 = 0;
        var offsetY0 = 0;
        var offsetX1, offsetY1, letter, character;

        for (var i = 0; i < text.length; i++) {

            letter = text.substr(i, 1);
            character = characters[letter];

            offsetX1 = offsetX0 + character.width;
            offsetY1 = offsetY0 + character.height;

            // bottom right

            vertices[index++] = x;
            vertices[index++] = y;
            vertices[index++] = offsetX1;
            vertices[index++] = offsetY1;
            vertices[index++] = character.u1;
            vertices[index++] = character.v1;
            intView[index++] = colorValue;
            vertices[index++] = rotation;

            // bottom left

            vertices[index++] = x;
            vertices[index++] = y;
            vertices[index++] = offsetX0;
            vertices[index++] = offsetY1;
            vertices[index++] = character.u0;
            vertices[index++] = character.v1;
            intView[index++] = colorValue;
            vertices[index++] = rotation;

            // top left

            vertices[index++] = x;
            vertices[index++] = y;
            vertices[index++] = offsetX0;
            vertices[index++] = offsetY0;
            vertices[index++] = character.u0;
            vertices[index++] = character.v0;
            intView[index++] = colorValue;
            vertices[index++] = rotation;

            // top right

            vertices[index++] = x;
            vertices[index++] = y;
            vertices[index++] = offsetX1;
            vertices[index++] = offsetY0;
            vertices[index++] = character.u1;
            vertices[index++] = character.v0;
            intView[index++] = colorValue;
            vertices[index++] = rotation;

            offsetX0 += character.width;
            this.size++;
        }
    },
};
