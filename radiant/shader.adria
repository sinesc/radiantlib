/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Uniform = require('./uniform');
var Attribute = require('./attribute');
var GL = window.WebGLRenderingContext;

module Shader = proto {

    public BYTE             : GL.BYTE,
    public UNSIGNED_BYTE    : GL.UNSIGNED_BYTE,
    public SHORT            : GL.SHORT,
    public UNSIGNED_SHORT   : GL.UNSIGNED_SHORT,
    public INT              : GL.INT,
    public UNSIGNED_INT     : GL.UNSIGNED_INT,
    public FLOAT            : GL.FLOAT,

    public UNIFORM_MATRIX   : Uniform::MATRIX,
    public UNIFORM_ARRAY    : Uniform::ARRAY,
    public UNIFORM_VALUE    : Uniform::VALUE,

    /**
     * @var finite total attributes size in bytes
     */
    public attributeSize: 0,

    /**
     * @var object radiant reference to radiant
     */
    protected radiant: null,

    /**
     * @var string fragmentSrc fragment shader source code
     */
    protected fragmentSrc: '',

    /**
     * @var string vertexSrc vertex shader source code
     */
    protected vertexSrc: '',

    /**
     * @var actual gl shader program
     */
    private program: null,

    /**
     * @var Array registered <Attribute>s
     */
    private attributes: null,

    /**
     * @var Array registered <Uniform>s
     */
    private uniforms: null,

    /**
     * construct new shader
     *
     * @param Radiant radiant
     */
    public constructor: func(radiant) {

        this.radiant = radiant;
        this.attributes = [];
        this.uniforms = [];

        this.compile();
        this.useProgram();
        this.register();

        this.radiant.on('contextrestored', this, this.restoreContext);
    },

    /**
     * destroy shader and release resources
     */
    public destroy: func() {

        this.radiant.off('contextrestored', this, this.restoreContext);
        this.radiant = null;
        this.attributes = null;
        this.uniforms = null;
        this.radiant.gl.deleteProgram(this.program);
    },

    /**
     * use this shader programm
     */
    public use: func() {

        if (this.radiant.currentShader === this) {
            return;
        }

        this.useProgram();
        this.useAttributes();
        this.useUniforms();

        this.radiant.currentShader = this;
    },

    /**
     * generate shader (compile it, associate uniforms and attributes)
     */
    public restoreContext: func() {

        var attributes = this.attributes;
        var uniforms = this.uniforms;

        this.compile();
        this.useProgram();

        for (var i = 0, num = attributes.length; i < num; ++i) {
            attributes[i].restoreContext();
        }

        for (var i = 0, num = uniforms.length; i < num; ++i) {
            uniforms[i].restoreContext();
        }
    },

    /**
     * register attributes and uniforms here
     */
    protected register: func() { },

    /**
     * registers a shader attribute with this wrapper
     *
     * @param string srcName name in shader source
     * @param integer parts number of components
     * @param integer type GL type
     * @param boolean normalized
     * @param string propName name of the object property on this object that will refer to srcName
     */
    protected registerAttribute: func(string srcName, finite parts, finite type, boolean normalized = false, string propName = srcName) {

        var attribute = new Attribute(this, srcName, parts, type, normalized);
        this[propName] = attribute;
        this.attributes.push(attribute);
        this.attributeSize += attribute.size;
    },

    /**
     * registers a shader uniform with this wrapper
     *
     * @see Uniform
     * @param string propName property name to generate on the shader object, defaults to srcName
     */
    protected registerUniform: func(string srcName, finite type = Uniform::INT, finite parts = 1, finite layout = Uniform::VALUE, string propName = srcName) {

        var uniform = new Uniform(this, srcName, type, parts, layout);
        this[propName] = uniform;
        this.uniforms.push(uniform);
    },

    /**
     * use vertex attribute pointers from this shader
     */
    private useAttributes: func() {

        var attributes = this.attributes;
        var offset = 0;
        var size = this.attributeSize;

        // select/enable used attributes, disable the rest

        for (var i = 0, num = attributes.length; i < num; ++i) {
            var attribute = attributes[i];
            offset += attribute.use(size, offset);
        }

        Attribute::disable(this.radiant, attributes.length);
    },

    /**
     * set uniforms for this shader
     */
    private useUniforms: func() {

        var uniforms = this.uniforms;

        for (var i = 0, num = uniforms.length; i < num; ++i) {
            uniforms[i].use();
        }
    },

    /**
     * use program for this shader
     */
    private useProgram: func() {
        this.radiant.gl.useProgram(this.program);
    },

    /**
     * compile vertex and fragment source to program
     */
    private compile: func() {

        var gl = this.radiant.gl;

        var shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, this.createShader(gl.VERTEX_SHADER, this.vertexSrc));
        gl.attachShader(shaderProgram, this.createShader(gl.FRAGMENT_SHADER, this.fragmentSrc));
        gl.linkProgram(shaderProgram);

        if (gl.isContextLost() === false && gl.getProgramParameter(shaderProgram, gl.LINK_STATUS) !== true) {
            throw new Exception('Error linking shaders');
        }

        this.program = shaderProgram;
    },

    /**
     * create a shader of given type from given source code
     *
     * @param finite type gl shader type
     * @param string src shader source code
     * @return object gl shader object
     */
    private createShader: func(finite type, string src) {

        var gl = this.radiant.gl;

        var shader = gl.createShader(type);
        gl.shaderSource(shader, src);
        gl.compileShader(shader);

        if (gl.isContextLost() === false && gl.getShaderParameter(shader, gl.COMPILE_STATUS) !== true) {
            throw new Exception('Error compiling ' + (type === gl.VERTEX_SHADER ? 'vertex' : 'fragment') + '-shader: ' + gl.getShaderInfoLog(shader));
        }

        return shader;
    },
};
