/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var GL = window.WebGLRenderingContext;

module Buffer = proto {

    /**
     * relevant gl constants
     */
    public ARRAY_BUFFER         : GL.ARRAY_BUFFER,
    public ELEMENT_ARRAY_BUFFER : GL.ELEMENT_ARRAY_BUFFER,
    public DYNAMIC_DRAW         : GL.DYNAMIC_DRAW,
    public STATIC_DRAW          : GL.STATIC_DRAW,

    /**
     * radiant reference
     */
    public radiant: null,

    /**
     * number of indexed rectangles
     */
    public size: 0,

    /**
     * disables upload if false
     */
    public dirty: true,

    /**
     * buffer data array
     */
    protected data: null,

    /**
     * webgl target buffer
     */
    protected buffer: null,
    protected bufferSize: 0,

    /**
     * webgl target binding
     */
    protected target: self::ARRAY_BUFFER,

    /**
     * webgl draw mode
     */
    protected mode: self::DYNAMIC_DRAW,

    /**
     * index buffer constructor
     *
     * @param object radiant
     * @param object bufferdata
     */
    public constructor: func(object radiant, object bufferdata) {

        this.radiant = radiant;
        this.buffer = null;
        this.data = bufferdata;
        this.radiant.on('contextrestored', this, this.restoreContext);
        this.restoreContext();
    },

    /**
     * clean up buffers and listeners
     */
    public destroy: func() {

        this.radiant.off('contextrestored', this, this.restoreContext);
        this.radiant.gl.deleteBuffer(this.buffer);
    },

    /**
     * restore webgl context after context loss
     */
    public restoreContext: func() {
        this.bufferSize = -1;
        this.syncBuffer();
    },

    /**
     * bind buffer, uploads data if dirty
     */
    public use: func() {

        if (this.dirty) {
            this.upload();
        } else {
            this.radiant.gl.bindBuffer(this.target, this.buffer);
        }
    },

    /**
     * bind buffer and copy data to it
     *
     * @param finite from if specified, dirty needs to be unset manually
     * @param finite to if specified, dirty needs to be unset manually
     */
    public upload: func(finite? from = -1, finite? to = -1) {

        if (this.syncBuffer()) {
            return;
        }

        var gl = this.radiant.gl;
        gl.bindBuffer(this.target, this.buffer);

        if (from === -1 && to === -1) {
            gl.bufferSubData(this.target, 0, this.data);
            this.dirty = false;
        } else if (to === -1) {
            gl.bufferSubData(this.target, from * this.data.BYTES_PER_ELEMENT, this.data.subarray(from));
        } else {
            gl.bufferSubData(this.target, from * this.data.BYTES_PER_ELEMENT, this.data.subarray(from, to));
        }
    },

    /**
     * ensures webgl buffer exists and is of sufficient size to hold data. creates and fills buffer
     * if either criterium was not met
     *
     * @return boolean false if buffer exists and has sufficient size
     */
    protected syncBuffer: func() {

        var gl = this.radiant.gl;
        var expectedSize = this.data.length * this.data.BYTES_PER_ELEMENT;

        if (this.bufferSize !== expectedSize) {

            if (this.buffer !== null) {
                gl.deleteBuffer(this.buffer);
            }

            this.buffer = gl.createBuffer();
            gl.bindBuffer(this.target, this.buffer);
            gl.bufferData(this.target, this.data, this.mode);
            
            this.bufferSize = expectedSize;
            this.dirty = false;
            return true;
        }

        return false;
    },
};
