/*
 * radiant 2d webgl rendering engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
/*
 * find byte positions and masks for individual color channels
 */
var rPos = 0, gPos = 8, bPos = 16, aPos = 24;

(func() {
    var buffer = new ArrayBuffer(2);
    new DataView(buffer).setInt16(0, 256, true);
    if (new Int16Array(buffer)[0] !== 256) {
        rPos = 24 - rPos;
        gPos = 24 - gPos;
        bPos = 24 - bPos;
        aPos = 24 - aPos;
    }
})();

var rSelect = 0xFF << rPos;
var gSelect = 0xFF << gPos;
var bSelect = 0xFF << bPos;
var aSelect = 0xFF << aPos;
var rFilter = ~rSelect;
var gFilter = ~gSelect;
var bFilter = ~bSelect;
var aFilter = ~aSelect;

/**
 * radiant color prototype
 */
module Color = proto {

    value: 0,
    //!todo premultiplication flag

    /**
     * constructor, takes 0, 1, 3 or 4 parameters
     *
     * @param finite r
     * @param finite g
     * @param finite b
     * @param finite a
     */
    constructor: func([ finite r = 255, finite g = 255, finite b = 255 ], [ finite a = 255 ]) {

        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    },

    r: prop {
        set: func(color) {
            this.value = (this.value & rFilter) | (color << rPos);
        },
        get: func(value) {
            return (this.value & rSelect) >>> rPos;
        },
    },

    g: prop {
        set: func(color) {
            this.value = (this.value & gFilter) | (color << gPos);
        },
        get: func(value) {
            return (this.value & gSelect) >>> gPos;
        },
    },

    b: prop {
        set: func(color) {
            this.value = (this.value & bFilter) | (color << bPos);
        },
        get: func(value) {
            return (this.value & bSelect) >>> bPos;
        },
    },

    a: prop {
        set: func(color) {
            this.value = (this.value & aFilter) | (color << aPos);
        },
        get: func(value) {
            return (this.value & aSelect) >>> aPos;
        },
    },

    toString: func() {
        return 'rgba(' + this.r + ',' + this.g + ',' + this.b + ',' + (this.a / 255).toFixed(3) + ')';
    },

};

/*
 * constructor methods returning integer representation of given colors
 */

export rgb = func(finite r, finite g, finite b) {
    return r << rPos | g << gPos | b << bPos | 255 << aPos;
};

export rgba = func(finite r, finite g, finite b, finite a) {
    return r << rPos | g << gPos | b << bPos | a << aPos;
};

export alpha = func(finite a) {
    return 255 << rPos | 255 << gPos | 255 << bPos | a << aPos;
};

export alphaPM = func(finite a) {
    return a << rPos | a << gPos | a << bPos | a << aPos;
};


/*
 * some pre-built colors
 */

export WHITE = new Color();
export BLACK = new Color(0, 0, 0);
export RED = new Color(255, 0, 0);
export GREEN = new Color(0, 255, 0);
export BLUE = new Color(0, 0, 255);
export YELLOW = new Color(255, 255, 0);
export PURPLE = new Color(255, 0, 255);
export CYAN = new Color(0, 255, 255);
