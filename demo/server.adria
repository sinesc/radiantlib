/*
 * Mini HTTP Development-Server
 *
 * Copyright (c) 2014 Dennis MÃ¶hlmann
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var http = require('http');
var fs = require('fs');
var cp = require('child_process');
var path = require('path');

// server configuration

var listenPort = 80;
var documentRoot = '../www/';
var monitoredFiles = [ './demo.abc' ];

var contentTypes = {
    'html'  : 'text/html',
    'js'    : 'application/javascript',
    'png'   : 'image/png',
    'jpg'   : 'image/jpg',
    'gif'   : 'image/gif',
    'ogg'   : 'audio/ogg',
    'ttf'   : 'application/x-font-ttf',
};

// compile (and possibly monitor) project files

var compile = func(file) {

    console.log('[server] monitoring ' + file);

    var child = cp.execFile(
        'adria',
        [ '-c', path.basename(file) ],
        { cwd: path.dirname(file) }
    );

    var prefixMessage = func(message) {
        var lines = message.trim().split('\n');
        for(var id, line in lines) {
            lines[id] = '[' + file + '] ' + line + '\n';
        }
        return lines.join('');
    };

    child.stdout.on('data', func(chunk) {
        process.stdout.write(prefixMessage(chunk.toString()));
    });

    child.stderr.on('data', func(chunk) {
        process.stderr.write(prefixMessage(chunk.toString()));
    });
};

for (var _, file in monitoredFiles) {
    compile(file);
}

// create server

documentRoot = path.resolve(documentRoot);

var server = http.createServer(func(request, response) {

    var filename = null;
    var extension = null;

    if (request.url === '/index.html' || request.url === '/') {

        filename = documentRoot + '/index.html';
        extension = 'html';

    } else {

        var dot = request.url.lastIndexOf('.');
        extension = dot > -1 ? request.url.slice(dot +1) : null;
        filename = documentRoot + request.url;
    }

    // verify that file is located inside document root

    var isValid = filename.slice(0, documentRoot.length +1) === (documentRoot + '/');

    // send response

    if (isValid && extension !== null && contentTypes.hasOwnProperty(extension)) {

        fs.readFile(filename, func(err, data) {
            if (err !== null) {
                console.log('[server] 404 ' + request.url + ' => ' + filename);
                response.writeHead(404, { 'Content-Type': 'text/plain' });
                response.end('HTTP 404 Not Found');
            } else {
                response.writeHead(200, { 'Content-Type': contentTypes[extension] });
                response.end(data);
            }
        });

    } else {

        console.log('[server] 404 ' + request.url + ' => unmapped');
        response.writeHead(404, { 'Content-Type': 'text/plain' });
        response.end('HTTP 404 Not Found');
    }
});

server.listen(listenPort, func() {
    console.log('[server] Listening on port ' + listenPort);
});
